name: Pipeline

on: [push]
env:
  APPLICATION_NAME: python-app
  GKE_CLUSTER: din-cluster
  IMAGE: static-site
  DEPLOYMENT_NAME: gke-test
jobs:

 lint:
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v2
    - name: Setup Python environment
      uses: actions/setup-python@v2
    - name: Install requirements
      run: pip install --quiet --requirement requirements.txt
    - name: Lint code
      run: |
        flake8 --ignore=E501,E231,E0401,E302,E305,E121,E265,E0602,E999,E111,E113,E0001,E225,E303,E228,F821,F841,F507,W293,E1305,E902,E211,E251,W0612,C0303,R1732 *.py
        pylint --disable=C0301,C0116,C0114,C0103,W0612,C0303,F507,E1305,E0602 --disable=C0326,W0612,F507,C0303,E1305,E0602,R1732 *.py
    - name: Run unit tests
      run: |
        python -m unittest --verbose --failfast        
  
 build_image:
    needs: [lint]
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v2
    - name: Set up GCloud
      uses: google-github-actions/setup-gcloud@master
      with:
        version: '290.0.1'
        service_account_email: ${{ secrets.GCP_SERVICE_ACCT_EMAIL }}
        service_account_key: ${{ secrets.GCP_SERVICE_ACCT_KEY }}
    - run: |
        gcloud config set project ${{ secrets.GCP_PROJECT_ID }}
        gcloud config set run/region ${{ secrets.GCP_REGION }}
        gcloud auth configure-docker
        gcloud info
    
    - name: Build and tag image
      run: docker build  -t "gcr.io/${{ secrets.GCP_PROJECT_ID }}/${{ env.APPLICATION_NAME }}:latest" .
 
      
    - name: Push to GCP image registry
      run: docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/${{ env.APPLICATION_NAME }}:latest

 test_image:
    needs: [build_image]
    runs-on: ubuntu-18.04
    steps:
    - name: Set up GCloud
      uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
      with:
        version: '274.0.1'
        service_account_email: ${{ secrets.GCP_SERVICE_ACCT_EMAIL }}
        service_account_key: ${{ secrets.GCP_SERVICE_ACCT_KEY }}
    - run: |
        gcloud config set project ${{ secrets.GCP_PROJECT_ID }}
        gcloud config set run/region ${{ secrets.GCP_REGION }}
        gcloud auth configure-docker
        gcloud info
      
    - name: Run unit tests in container
      run: docker run "gcr.io/${{ secrets.GCP_PROJECT_ID }}/${{ env.APPLICATION_NAME }}:latest" -m unittest --verbose --failfast

 deploy:
    needs: [test_image]
    runs-on: ubuntu-18.04
    steps:
    - name: Set up GCloud
      uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
      with:
        version: '274.0.1'
        service_account_email: ${{ secrets.GCP_SERVICE_ACCT_EMAIL }}
        service_account_key: ${{ secrets.GCP_SERVICE_ACCT_KEY }}
    - run: |
        gcloud config set project ${{ secrets.GCP_PROJECT_ID }}
        gcloud config set run/region ${{ secrets.GCP_REGION }}
        gcloud info
        
    # Deploy the Docker image to the GKE cluster#
    - name: Deploy
      run: |
        gcloud container clusters get-credentials $GKE_CLUSTER \
          --zone ${{ secrets.GCP_REGION }} \
          --project ${{ secrets.GCP_PROJECT_ID }}
        kubectl get services -o wide
        #kubectl create deployment satellites2  --replicas=2 --image="gcr.io/${{ secrets.GCP_PROJECT_ID }}/${{ env.APPLICATION_NAME }}:latest" 
        
        cat <<EOF | kubectl apply -f -
        apiVersion: v1
        kind: Service
        metadata:
          name: satellite-python-service
        spec:
          selector:
            app: satellite
          ports:
          - protocol: "TCP"
            port: 90
            targetPort: 5000
          type: LoadBalancer
          
        ---
        
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: satellite
        spec:
          selector:
            matchLabels:
              app: satellite
          replicas: 2
          template:
            metadata:
              labels:
                app: satellite
            spec:
              containers:
              - name: satellite
                image: gcr.io/${{ secrets.GCP_PROJECT_ID }}/${{ env.APPLICATION_NAME }}
                imagePullPolicy: Always
                ports:
                - containerPort: 5000
        EOF




